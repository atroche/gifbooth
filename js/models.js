// Generated by CoffeeScript 1.3.3
(function() {
  var GIF, GIF_BUILD_PATH, PROJECT_DIRECTORY, Snapshot, exec, fs, im, puts, sys, uuid, _;

  exec = require('child_process').exec;

  sys = require('sys');

  fs = require('fs');

  im = require('imagemagick');

  uuid = require('node-uuid');

  _ = require('underscore');

  GIF_BUILD_PATH = "" + process.env.HOME + "/gifbuild/";

  PROJECT_DIRECTORY = "" + process.env.HOME + "/dev/gifbooth/";

  puts = function(error, stdout, stderr) {
    if (error) {
      sys.puts("error");
      sys.puts(error);
    }
    if (stdout) {
      sys.puts("stdout");
      sys.puts(stdout);
    }
    if (stderr) {
      sys.puts("stderr");
      return sys.puts(stderr);
    }
  };

  Snapshot = (function() {

    function Snapshot(imgContents, gif, numInSequence) {
      var filename,
        _this = this;
      this.numInSequence = numInSequence;
      this.readyForGiffing = false;
      imgContents = imgContents.replace(/^data:image\/jpeg;base64,/, "");
      filename = "" + GIF_BUILD_PATH + gif.id + this.numInSequence + ".jpg";
      fs.writeFile(filename, imgContents, 'base64', function(err) {
        var conversionArgs;
        if (err) {
          console.log("writing file error");
          console.log(err);
          return;
        }
        conversionArgs = [filename, '-resize', '320x240', filename];
        return im.convert(conversionArgs, function(err, stdout, stderr) {
          if (err) {
            console.log("error converting");
            console.log(err);
            return;
          }
          console.log("file converted!");
          _this.readyForGiffing = true;
          console.log("I'm snapshot " + _this.numInSequence + " and I'm ready: " + _this.readyForGiffing);
          return gif.checkIfReady();
        });
      });
    }

    return Snapshot;

  })();

  GIF = (function() {

    function GIF(expectedNumberOfImages, socket) {
      this.expectedNumberOfImages = expectedNumberOfImages;
      this.socket = socket;
      this.id = uuid.v4();
      this.snapshots = [];
    }

    GIF.prototype.addSnapshot = function(snapData) {
      var snapshot;
      snapshot = new Snapshot(snapData.imgContents, this, snapData.numInSequence);
      return this.snapshots.push(snapshot);
    };

    GIF.prototype.createGif = function() {
      var command, outputFilename, snapFilenames, snapshot;
      this.snapshots = _(this.snapshots).sortBy(function(snapshot) {
        return snapshot.numInSequence;
      });
      snapFilenames = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.snapshots;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          snapshot = _ref[_i];
          _results.push("" + GIF_BUILD_PATH + this.id + snapshot.numInSequence + ".jpg");
        }
        return _results;
      }).call(this)).join(" ");
      outputFilename = "gifs/" + this.id + ".gif";
      command = "python makegif.py -o " + outputFilename + " " + snapFilenames;
      return exec(command, {
        cwd: PROJECT_DIRECTORY
      }, function(error, stdout, stderr) {
        puts(error, stdout, stderr);
        if (!error) {
          return this.socket.emit("gifDone", {
            url: outputFilename
          });
        }
      });
    };

    GIF.prototype.checkIfReady = function() {
      var enoughSnaps, snap, snapsReady, _i, _len, _ref;
      console.log("checking if ready");
      console.log("received " + this.snapshots.length + " snapshots so far");
      enoughSnaps = this.snapshots.length === this.expectedNumberOfImages;
      if (enoughSnaps) {
        snapsReady = _(this.snapshots).all(function(snapshot) {
          return snapshot.readyForGiffing;
        });
        console.log("snaps ready? " + snapsReady);
        _ref = this.snapshots;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          snap = _ref[_i];
          console.log("snap " + snap.numInSequence + " is ready? " + snap.readyForGiffing);
        }
        if (snapsReady) {
          console.log("creating gif");
          return this.createGif();
        }
      }
    };

    return GIF;

  })();

  module.exports = {
    GIF: GIF,
    Snapshot: Snapshot
  };

}).call(this);
