// Generated by CoffeeScript 1.3.3
(function() {
  var GIF_BUILD_PATH, IMGUR_API_KEY, exec, fs, gifs, im, imgur, io, postImageToImgur, puts, sys, uuid, writeFile;

  IMGUR_API_KEY = "652deb70e66249c7046971f0850f144d";

  GIF_BUILD_PATH = "/home/atroche/gifbuild/";

  io = require('socket.io').listen(8080);

  fs = require('fs');

  im = require('imagemagick');

  uuid = require('node-uuid');

  sys = require('sys');

  exec = require('child_process').exec;

  imgur = require('imgur');

  imgur.setKey(IMGUR_API_KEY);

  gifs = [];

  puts = function(error, stdout, stderr) {
    if (error) {
      sys.puts("error");
      sys.puts(error);
    }
    if (stdout) {
      sys.puts("stdout");
      sys.puts(stdout);
    }
    if (stderr) {
      sys.puts("stderr");
      return sys.puts(stderr);
    }
  };

  postImageToImgur = function(filename, socket) {
    return imgur.upload(filename, function(response) {
      if (response.error) {
        return console.log(response.error);
      } else {
        console.log(response);
        console.log(response.links.original);
        return socket.emit('imgur', {
          url: response.links.original
        });
      }
    });
  };

  io.sockets.on('connection', function(socket) {
    var expectedImages, imagesReceived, uploadPrefix;
    expectedImages = null;
    imagesReceived = null;
    uploadPrefix = null;
    socket.on('numImages', function(data) {
      expectedImages = data.numImages;
      return uploadPrefix = uuid.v4();
    });
    return socket.on('image', function(data) {
      var filename, imgData;
      imgData = data.contents.replace(/^data:image\/jpeg;base64,/, "");
      console.log(imgData.length);
      filename = "" + GIF_BUILD_PATH + uploadPrefix + data.imgNum + ".jpg";
      return fs.writeFile(filename, imgData, 'base64', function(err) {
        if (err) {
          console.log("writing file error");
          console.log(err);
        }
        return im.convert([filename, '-resize', '320x240', filename], function(err, stdout, stderr) {
          var command, i, imArgs, output_file;
          puts(err, stdout, stderr);
          imagesReceived += 1;
          if (imagesReceived >= expectedImages) {
            console.log("It's python time");
            imArgs = (function() {
              var _i, _results;
              _results = [];
              for (i = _i = 0; 0 <= expectedImages ? _i < expectedImages : _i > expectedImages; i = 0 <= expectedImages ? ++_i : --_i) {
                _results.push("" + GIF_BUILD_PATH + uploadPrefix + i + ".jpg");
              }
              return _results;
            })();
            console.log(imArgs);
            exec("ls", puts);
            output_file = "gifs/" + uploadPrefix + ".gif";
            command = "python makegif.py -o " + output_file + " " + (imArgs.join(" "));
            console.log(command);
            exec(command, function(error, stdout, stderr) {
              puts(error, stdout, stderr);
              if (!error) {
                return postImageToImgur(output_file, socket);
              }
            });
            imagesReceived = 0;
            return expectedImages = 0;
          }
        });
      });
    });
  });

  writeFile = function(data, filename) {
    return fs.writeFile(filename, data, 'base64', function(err) {});
  };

}).call(this);
